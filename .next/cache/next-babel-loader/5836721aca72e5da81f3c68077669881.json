{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport ProductItems from \"./ProductItems\";\n\nclass ProductsPlate extends Component {\n  render() {\n    const {\n      brand,\n      minValue,\n      maxValue,\n      data,\n      view\n    } = this.props; // Формирование начального массива продуктов по бренду\n\n    let productItems = []; // Если все - то добавляем все продукты в массив\n\n    if (brand == \"ALL\") {\n      data.map(category => {\n        category.map(item => {\n          productItems.push(item);\n        });\n      });\n    } else {\n      // Иначе копируем продукты из пропсов\n      productItems = data;\n    } // Работа с фильтром\n\n\n    const result = productItems.filter(item => item.electricPower <= maxValue && item.electricPower >= minValue);\n    result.sort(function (a, b) {\n      return a.electricPower - b.electricPower;\n    });\n    return __jsx(ProductItems, {\n      data: result,\n      view: view\n    });\n  }\n\n}\n\nProductsPlate.defaultProps = {\n  minValue: 100,\n  maxValue: 4000,\n  view: \"list\"\n};\nexport default ProductsPlate;","map":{"version":3,"sources":["G:/OSPanel/domains/gmnext9/components/products/ProductPlate.js"],"names":["React","Component","ProductItems","ProductsPlate","render","brand","minValue","maxValue","data","view","props","productItems","map","category","item","push","result","filter","electricPower","sort","a","b","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,aAAN,SAA4BF,SAA5B,CAAsC;AACpCG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA,QAAnB;AAA6BC,MAAAA,IAA7B;AAAmCC,MAAAA;AAAnC,QAA4C,KAAKC,KAAvD,CADO,CAGP;;AACA,QAAIC,YAAY,GAAG,EAAnB,CAJO,CAKP;;AACA,QAAIN,KAAK,IAAI,KAAb,EAAoB;AAClBG,MAAAA,IAAI,CAACI,GAAL,CAASC,QAAQ,IAAI;AACnBA,QAAAA,QAAQ,CAACD,GAAT,CAAaE,IAAI,IAAI;AACnBH,UAAAA,YAAY,CAACI,IAAb,CAAkBD,IAAlB;AACD,SAFD;AAGD,OAJD;AAKD,KAND,MAMO;AACL;AACAH,MAAAA,YAAY,GAAGH,IAAf;AACD,KAfM,CAiBP;;;AACA,UAAMQ,MAAM,GAAGL,YAAY,CAACM,MAAb,CACbH,IAAI,IAAIA,IAAI,CAACI,aAAL,IAAsBX,QAAtB,IAAkCO,IAAI,CAACI,aAAL,IAAsBZ,QADnD,CAAf;AAGAU,IAAAA,MAAM,CAACG,IAAP,CAAY,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACzB,aAAOD,CAAC,CAACF,aAAF,GAAkBG,CAAC,CAACH,aAA3B;AACD,KAFD;AAIA,WAAO,MAAC,YAAD;AAAc,MAAA,IAAI,EAAEF,MAApB;AAA4B,MAAA,IAAI,EAAEP;AAAlC,MAAP;AACD;;AA3BmC;;AAsCtCN,aAAa,CAACmB,YAAd,GAA6B;AAC3BhB,EAAAA,QAAQ,EAAE,GADiB;AAE3BC,EAAAA,QAAQ,EAAE,IAFiB;AAG3BE,EAAAA,IAAI,EAAE;AAHqB,CAA7B;AAMA,eAAeN,aAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ProductItems from \"./ProductItems\";\r\n\r\nclass ProductsPlate extends Component {\r\n  render() {\r\n    const { brand, minValue, maxValue, data, view } = this.props;\r\n\r\n    // Формирование начального массива продуктов по бренду\r\n    let productItems = [];\r\n    // Если все - то добавляем все продукты в массив\r\n    if (brand == \"ALL\") {\r\n      data.map(category => {\r\n        category.map(item => {\r\n          productItems.push(item);\r\n        });\r\n      });\r\n    } else {\r\n      // Иначе копируем продукты из пропсов\r\n      productItems = data;\r\n    }\r\n\r\n    // Работа с фильтром\r\n    const result = productItems.filter(\r\n      item => item.electricPower <= maxValue && item.electricPower >= minValue\r\n    );\r\n    result.sort(function(a, b) {\r\n      return a.electricPower - b.electricPower;\r\n    });\r\n\r\n    return <ProductItems data={result} view={view} />;\r\n  }\r\n}\r\n\r\nProductsPlate.propTypes = {\r\n  brand: PropTypes.string.isRequired,\r\n  minValue: PropTypes.number.isRequired,\r\n  maxValue: PropTypes.number.isRequired,\r\n  data: PropTypes.array.isRequired,\r\n  view: PropTypes.string\r\n};\r\n\r\nProductsPlate.defaultProps = {\r\n  minValue: 100,\r\n  maxValue: 4000,\r\n  view: \"list\"\r\n};\r\n\r\nexport default ProductsPlate;\r\n"]},"metadata":{},"sourceType":"module"}